plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.1'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'org.openapi.generator' version '7.10.0'
}

group = 'com.cabaleros.weather'
version = '1.0.0'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	openApiVersion = '2.8.3'
	mapstructVersion = '1.6.3'
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation "org.springdoc:springdoc-openapi-starter-webflux-ui:$openApiVersion"
	implementation "org.mapstruct:mapstruct:$mapstructVersion"
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	annotationProcessor "org.mapstruct:mapstruct-processor:$mapstructVersion"
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'io.projectreactor:reactor-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
	useJUnitPlatform()
}

sourceSets {
	main {
		java {
			srcDir "$buildDir/generated/src/main/java"
		}
	}
}

compileJava {
	dependsOn 'openApiGenerate'
}

openApiGenerate {
	generatorName = 'spring'
	inputSpec = "$projectDir/src/main/resources/api/spec.yaml"
	outputDir = "$buildDir/generated"
	apiPackage = 'com.cabaleros.weather.forecast.adapter.driving.controller'
	modelPackage = 'com.cabaleros.weather.forecast.adapter.driving.model'
	typeMappings = [
	    OffsetDateTime: 'Instant',
	]
	importMappings = [
	    'java.time.OffsetDateTime': 'java.time.Instant',
	]
	configOptions = [
			reactive: 'true',
			useSpringBoot3: 'true',
			useTags: 'true',
			groupByTags: 'true',
			interfaceOnly: 'true',
			dateLibrary: 'java8',
			useOptional: 'true',
			generateBuilders: 'true',
			openApiNullable: 'false'
	]
}

task getVersion {
	doLast {
		println project.version
	}
}
